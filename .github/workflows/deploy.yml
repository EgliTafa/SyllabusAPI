name: Build, Push, and Apply Migrations to Azure SQL

on:
  push:
    branches:
      - development
      - main
    tags:
      - 'v*.*.*'  # Semantic versioning tags

env:
  ACR_LOGIN_SERVER: syllabusregistry.azurecr.io
  ACR_REPOSITORY: syllabusapi

jobs:
  build-push-migrate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required to access Git tags

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract tag version
        id: get_tag
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=latest" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: SyllabusAPI/Dockerfile
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.ACR_REPOSITORY }}:${{ steps.get_tag.outputs.version }}
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.ACR_REPOSITORY }}:latest

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Apply EF Core migrations
        run: dotnet ef database update --project Syllabus.Infrastructure --startup-project SyllabusAPI --context SyllabusDbContext
        env:
          ConnectionStrings__DefaultConnection: "Server=${{ secrets.SQL_SERVER }};Database=${{ secrets.SQL_DATABASE }};User Id=${{ secrets.SQL_USER }};Password=${{ secrets.SQL_PASSWORD }};Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
